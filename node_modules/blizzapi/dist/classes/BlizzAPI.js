"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers = __importStar(require("../helpers"));
const utils = __importStar(require("../utils"));
const BattleNetAPI_1 = __importDefault(require("./abstract/BattleNetAPI"));
class BlizzAPI extends BattleNetAPI_1.default {
    constructor(options) {
        super({
            region: options.region,
            clientId: options.clientId,
            clientSecret: options.clientSecret,
            accessToken: options.accessToken,
        });
        this.query = (endpoint, options) => __awaiter(this, void 0, void 0, function* () {
            return helpers.query({
                endpoint,
                region: this.region,
                clientId: this.clientId,
                clientSecret: this.clientSecret,
                accessToken: yield this.getAccessToken(),
                options: Object.assign(Object.assign({}, this.options), options),
            });
        });
        this.options = {
            validateAccessTokenOnEachQuery: options.validateAccessTokenOnEachQuery || false,
            refreshExpiredAccessToken: options.refreshExpiredAccessToken || false,
            onAccessTokenExpired: options.onAccessTokenExpired || undefined,
            onAccessTokenRefresh: options.onAccessTokenRefresh || undefined,
        };
    }
}
exports.default = BlizzAPI;
BlizzAPI.getAllRegions = utils.getAllRegions;
BlizzAPI.getAllRegionIds = utils.getAllRegionIds;
BlizzAPI.getAllRegionNames = utils.getAllRegionNames;
BlizzAPI.getRegionNameById = utils.getRegionNameById;
BlizzAPI.validateRegionId = utils.validateRegionId;
BlizzAPI.getRegionIdByName = utils.getRegionIdByName;
BlizzAPI.validateRegionName = utils.validateRegionName;
BlizzAPI.getAllLocales = utils.getAllLocales;
BlizzAPI.getAllLocaleNames = utils.getAllLocaleNames;
BlizzAPI.getLocalesByRegionId = utils.getLocalesByRegionId;
BlizzAPI.checkIfLocaleLooksValid = utils.checkIfLocaleLooksValid;
BlizzAPI.validateLocale = utils.validateLocale;
BlizzAPI.isLocaleValidForRegionId = utils.isLocaleValidForRegionId;
BlizzAPI.getAllSc2Realms = utils.getAllSc2Realms;
BlizzAPI.getAllAvailableSc2Realms = utils.getAllAvailableSc2Realms;
BlizzAPI.getSc2RealmsByRegionId = utils.getSc2RealmsByRegionId;
BlizzAPI.checkIfSc2RealmLooksValid = utils.checkIfSc2RealmLooksValid;
BlizzAPI.validateSc2Realm = utils.validateSc2Realm;
BlizzAPI.isSc2RealmValidForRegionId = utils.isSc2RealmValidForRegionId;
BlizzAPI.getDefaultLocaleNameForRegionId = utils.getDefaultLocaleNameForRegionId;
BlizzAPI.getAllDefaultLocaleNames = utils.getAllDefaultLocaleNames;
//# sourceMappingURL=BlizzAPI.js.map