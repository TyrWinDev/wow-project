"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const validators_1 = require("../validators");
exports.default = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const { uri, timeout, headers, params, data, auth, } = options;
    const method = options.method || 'GET';
    if (!validators_1.uri(uri)) {
        throw new RangeError(`'${uri}' is not a valid parameter for fetchFromUri()`);
    }
    const requestOptions = Object.assign(Object.assign(Object.assign(Object.assign({ method, url: encodeURI(uri), timeout: timeout || 10000 }, headers && { headers }), params && { params }), auth && { auth }), data && { data });
    const response = yield axios_1.default.request(requestOptions);
    const lastModified = response.headers['last-modified']
        ? response.headers['last-modified']
        : null;
    return Object.assign(Object.assign({}, response.data), lastModified && { lastModified });
});
//# sourceMappingURL=fetchFromUri.js.map