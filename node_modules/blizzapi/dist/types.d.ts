export declare type Uri = string;
export declare type ConstantKey = 'REGIONS' | 'LOCALES' | 'DEFAULT_LOCALES' | 'REGION_API_HOSTS' | 'SC2_REALMS' | 'OAUTH_AUTHORIZE_URIS' | 'OAUTH_TOKEN_URIS' | 'OAUTH_CHECK_TOKEN_URIS';
export declare type ConstantKeys = ReadonlyArray<ConstantKey>;
export declare type RegionId = number;
export declare type RegionIdKey = string;
export declare type RegionIdAsNumberOrString = RegionId | RegionIdKey;
export declare type RegionIdArray = ReadonlyArray<RegionId>;
export declare type RegionName = string;
export declare type RegionNameArray = ReadonlyArray<RegionName>;
export declare type Locale = string;
export declare type LocaleArray = ReadonlyArray<Locale>;
export declare type DefaultLocaleIndex = number;
export declare type DefaultLocaleIndexArray = ReadonlyArray<DefaultLocaleIndex>;
export declare type Sc2Realm = number;
export declare type Sc2RealmArray = ReadonlyArray<Sc2Realm>;
export declare type Sc2RealmList = ReadonlyArray<Sc2Realm>;
export declare type Sc2RealmAsNumberOrString = Sc2Realm | string;
export declare type RegionIdOrName = RegionId | RegionName;
export declare type MaybeRegion = RegionIdOrName | undefined;
export declare type ClientId = string;
export declare type ClientSecret = string;
export declare type AccessToken = string | undefined;
export declare type Endpoint = string;
export declare type HttpMethod = 'GET' | 'POST';
export declare type ValidatorFunction = (endpoint: Endpoint) => boolean;
export interface AccessTokenOptions {
    validateAccessTokenOnEachQuery?: boolean;
    refreshExpiredAccessToken?: boolean;
    onAccessTokenExpired?: Function | undefined;
    onAccessTokenRefresh?: Function | undefined;
}
export interface QueryOptions {
    timeout?: number;
    headers?: object | Headers;
    params?: object | URLSearchParams;
}
export interface BattleNetOptions {
    region: RegionIdOrName;
    clientId: ClientId;
    clientSecret: ClientSecret;
    accessToken?: AccessToken;
}
export interface InitOptions {
    region: string | number;
    clientId?: string;
    clientSecret?: string;
    accessToken?: string;
    validateAccessTokenOnEachQuery?: boolean;
    revalidateAccessTokenIfExpired?: boolean;
    onAccessTokenExpire?: Function | undefined;
    onAccessTokenRevalidate?: Function | undefined;
}
export interface RegionIdProperties<Value> {
    readonly [regionId: string]: Value;
}
//# sourceMappingURL=types.d.ts.map