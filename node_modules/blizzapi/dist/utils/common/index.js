"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConstantByRegion = exports.getConstantByRegionName = exports.getConstantByRegionId = void 0;
const constants_1 = __importDefault(require("../../constants"));
const regions_1 = require("../localization/regions");
exports.getConstantByRegionId = (regionId, constantKey) => {
    const regionIdAsString = typeof regionId !== 'string'
        ? regionId
        : regionId.toString();
    const isRegionIdValid = regions_1.validateRegionId(regionIdAsString);
    if (!isRegionIdValid) {
        throw new RangeError(`${regionIdAsString} is not a valid parameter for getConstantByRegionId(${regionId}, '${constantKey}')`);
    }
    return constants_1.default[constantKey][regionIdAsString];
};
exports.getConstantByRegionName = (regionName, constantKey) => {
    const isRegionNameValid = regions_1.validateRegionName(regionName);
    if (!isRegionNameValid) {
        throw new RangeError(`${regionName} is not a valid parameter for getConstantByRegionName(${regionName}, '${constantKey}')`);
    }
    const regionId = regions_1.getRegionIdByName(regionName);
    return constants_1.default[constantKey][regionId];
};
exports.getConstantByRegion = (regionIdOrName, constantKey) => (regions_1.validateRegionId(regionIdOrName)
    ? exports.getConstantByRegionId(regionIdOrName, constantKey)
    : exports.getConstantByRegionName(regionIdOrName.toString(), constantKey));
//# sourceMappingURL=index.js.map